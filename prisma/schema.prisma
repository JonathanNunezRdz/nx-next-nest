// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  alias     String
  firstName String
  lastName  String
  uid       String @unique
  hash      String
  email     String @unique

  image          UserImage?
  knownMedia     KnownMedia[]
  waifus         Waifu[]
  outgoingTrades Trade[]      @relation("sender")
  incomingTrades Trade[]      @relation("recipient")
}

model UserImage {
  user   User   @relation(references: [id], fields: [userId])
  userId String @unique

  image   Image  @relation(references: [id], fields: [imageId])
  imageId String @unique

  @@id([userId, imageId])
}

model Image {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  format ImageFormat

  user  UserImage?
  media MediaImage?
  waifu WaifuImage?
}

model MediaImage {
  media   Media  @relation(references: [id], fields: [mediaId], onDelete: Cascade)
  mediaId String @unique

  image   Image  @relation(references: [id], fields: [imageId])
  imageId String @unique

  @@id([mediaId, imageId])
}

model Media {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String    @unique
  type  MediaType

  image   MediaImage?
  knownBy KnownMedia[]
  waifus  Waifu[]
}

model KnownMedia {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId String

  knownAt DateTime

  @@id([userId, mediaId])
}

model Waifu {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  level WaifuLevel
  since DateTime

  image   WaifuImage?
  media   Media       @relation(references: [id], fields: [mediaId], onDelete: Cascade)
  mediaId String
  user    User        @relation(references: [id], fields: [userId])
  userId  String

  wantedTrade    Trade?  @relation(references: [id], fields: [wantedTradeId], name: "wanted")
  wantedTradeId  String?
  offeredTrade   Trade?  @relation(references: [id], fields: [offeredTradeId], name: "offered")
  offeredTradeId String?

  @@unique([name, mediaId])
}

model WaifuImage {
  waifu   Waifu  @relation(references: [id], fields: [waifuId], onDelete: Cascade)
  waifuId String @unique

  image   Image  @relation(references: [id], fields: [imageId])
  imageId String @unique

  @@id([waifuId, imageId])
}

model Trade {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  endedAt DateTime?
  status  TradeStatus @default(pending)

  sender      User   @relation(references: [id], fields: [senderId], name: "sender")
  senderId    String
  recipient   User   @relation(references: [id], fields: [recipientId], name: "recipient")
  recipientId String

  wantedWaifus  Waifu[] @relation("wanted")
  offeredWaifus Waifu[] @relation("offered")
}

enum MediaType {
  anime
  manga
  videogame
}

enum WaifuLevel {
  topWaifu
  jonin
  chunin
  genin
  freeAgent
  nationalTreasure
}

enum ImageFormat {
  apng
  avif
  gif
  jpg
  jpeg
  jfif
  pjpeg
  pjp
  png
  svg
  webp
}

enum TradeStatus {
  pending
  declined
  accepted
}
